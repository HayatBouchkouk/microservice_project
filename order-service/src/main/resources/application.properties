
# Database connection settings
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
spring.datasource.driver-class-name =com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order_service
spring.datasource.username=root
spring.datasource.password=Hayat98@

# Specify the DBMS
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=create-drop

server.port=8083

eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=order-service

management.endpoints.web.exposure.include=*
management.health.circuitbreakers.enabled=true
management.endpoint.health.show-details=always


#Resilinece4j Properties
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
##meaning that the CircuitBreaker will track the specified number of calls.
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
##This property defines how many calls are considered for the CircuitBreaker's state evaluation.
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
##If the failure rate exceeds this threshold, the CircuitBreaker will transition to the "open" state.
##This threshold represents the percentage of failed calls relative to the total number of calls.
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
##Specifies the duration for which the CircuitBreaker remains in the "open" state before transitioning to the "half-open" state. In this case, it's set to 5 seconds.
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
##. When the CircuitBreaker transitions to the "half-open" state, it allows a limited number of calls to test if the system is healthy again.
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true



##If the inventory service takes longer than the specified timeout duration to respond, the TimeLimiter will interrupt
# the call and return a failure response to the order service. This prevents the order service from waiting
# for a response from the inventory service and helps to maintain responsiveness and resilience in the system.
##
#resilience4j.timelimiter.instances.inventory.timeout-duration=3s


##Resilience4J Retry Properties
#resilience4j.retry.instances.inventory.max-attempts=3
#resilience4j.retry.instances.inventory.wait-duration=5s



# Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.example.orderservice.event.OrderPlaceEvent

##logging
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

